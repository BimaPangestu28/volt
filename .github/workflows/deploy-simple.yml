name: Simple Deploy with Docker Compose

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: bimapangestu/volt-backend
  FRONTEND_IMAGE: bimapangestu/volt-frontend

jobs:
  # Build and push images
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: tag
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/develop ]]; then
            echo "IMAGE_TAG=develop" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Backend
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:${{ steps.tag.outputs.IMAGE_TAG }}

      # Build Frontend  
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:${{ steps.tag.outputs.IMAGE_TAG }}

  # Deploy to staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          password: ${{ secrets.STAGING_PASSWORD }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            echo "üöÄ Deploying Volt to staging..."
            
            cd /opt/volt
            
            # Update image tags in docker-compose
            export BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}:develop
            export FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}:develop
            
            # Pull and restart services
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            
            # Cleanup
            docker image prune -f
            
            echo "‚úÖ Staging deployment completed!"

  # Deploy to production (main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASSWORD }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            echo "üöÄ Deploying Volt to production..."
            
            cd /opt/volt
            
            # Update image tags in docker-compose
            export BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}:latest
            export FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}:latest
            
            # Pull and restart services with zero downtime
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            
            # Cleanup old images
            docker image prune -f
            
            echo "‚úÖ Production deployment completed!"

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASSWORD }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            echo "üîç Running health checks..."
            
            # Wait for services to start
            sleep 10
            
            # Check backend health
            curl -f http://localhost:8080/health || echo "‚ùå Backend health check failed"
            
            # Check frontend is responding
            curl -f http://localhost:3000 || echo "‚ùå Frontend health check failed"
            
            echo "‚úÖ Health checks completed!"

  # Test only (PR)
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Run backend tests
        working-directory: ./backend
        run: |
          go mod download
          go test ./... -v

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Test frontend build
        working-directory: ./frontend
        run: |
          npm ci
          npm run check
          npm run build