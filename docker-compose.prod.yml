version: '3.8'

services:
  # MongoDB Database
  mongo:
    image: mongo:8.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-voltadmin_7x9k2p8q}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-VoltMongo#2024$Secure!9x7k2m8p}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-volt}
    volumes:
      - mongo_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - volt_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-VoltRedis#2024$Cache!5p9m3x7k}
    volumes:
      - redis_data:/data
    networks:
      - volt_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API
  backend:
    image: ${DOCKER_REGISTRY:-bimapangestu}/volt-backend:${VERSION:-latest}
    restart: unless-stopped
    environment:
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME:-voltadmin_7x9k2p8q}:${MONGO_ROOT_PASSWORD:-VoltMongo#2024$Secure!9x7k2m8p}@mongo:27017/${MONGO_DATABASE:-volt}?authSource=admin
      - REDIS_URI=redis://:${REDIS_PASSWORD:-VoltRedis#2024$Cache!5p9m3x7k}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8080
      - CORS_ORIGIN=${FRONTEND_URL:-http://localhost:3000}
      - WS_ORIGIN=${WS_ORIGIN:-ws://localhost:8080}
      - GIN_MODE=release
    depends_on:
      - mongo
      - redis
    networks:
      - volt_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 30s
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    image: ${DOCKER_REGISTRY:-bimapangestu}/volt-frontend:${VERSION:-latest}
    restart: unless-stopped
    environment:
      - VITE_API_URL=${API_URL:-http://localhost:8080}
      - VITE_WS_URL=${WS_URL:-ws://localhost:8080}
      - VITE_APP_NAME=Volt
      - VITE_BRAND_COLOR=#2563EB
    depends_on:
      - backend
    ports:
      - "80:3000"
      - "443:3000"
    networks:
      - volt_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 30s
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend
    networks:
      - volt_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

networks:
  volt_network:
    driver: overlay
    attachable: true

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local